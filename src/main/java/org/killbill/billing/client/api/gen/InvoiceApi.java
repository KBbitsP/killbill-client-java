/*
 * Copyright 2010-2014 Ning, Inc.
 * Copyright 2014-2020 Groupon, Inc
 * Copyright 2020-2021 Equinix, Inc
 * Copyright 2014-2021 The Billing Project, LLC
 *
 * The Billing Project licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */


package org.killbill.billing.client.api.gen;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Objects;

import org.killbill.billing.client.model.gen.AuditLog;
import org.killbill.billing.client.model.gen.CustomField;
import org.killbill.billing.client.model.gen.Invoice;
import org.killbill.billing.client.model.gen.InvoiceDryRun;
import org.killbill.billing.client.model.gen.InvoiceItem;
import org.killbill.billing.client.model.gen.InvoicePayment;
import org.joda.time.LocalDate;
import org.killbill.billing.client.model.gen.Tag;
import java.util.UUID;
import java.util.Map;
import org.killbill.billing.client.model.InvoiceItems;
import java.util.List;
import org.killbill.billing.client.model.Invoices;
import org.killbill.billing.client.model.CustomFields;
import org.killbill.billing.client.model.Tags;
import org.killbill.billing.util.api.AuditLevel;
import org.killbill.billing.client.model.AuditLogs;
import org.killbill.billing.client.model.InvoicePayments;

import org.killbill.billing.client.Converter;
import org.killbill.billing.client.KillBillClientException;
import org.killbill.billing.client.KillBillHttpClient;
import org.killbill.billing.client.RequestOptions;
import org.killbill.billing.client.RequestOptions.RequestOptionsBuilder;


/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
public class InvoiceApi {

    private final KillBillHttpClient httpClient;

    public InvoiceApi() {
        this(new KillBillHttpClient());
    }

    public InvoiceApi(final KillBillHttpClient httpClient) {
        this.httpClient = httpClient;
    }

    private <K, V> void addToMapValues(final Map<K, Collection<V>> map, final K key, final Collection<V> values) {
        if (map.containsKey(key)) {
            map.get(key).addAll(values);
        } else {
            map.put(key, values);
        }
    }

    public static <T> T checkNotNull(final T reference, final Object errorMessage) {
        if (reference == null) {
            throw new NullPointerException(String.valueOf(errorMessage));
        }
        return reference;
    }

    public Invoice adjustInvoiceItem(final UUID invoiceId, final InvoiceItem body, final LocalDate requestedDate, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling adjustInvoiceItem");
        checkNotNull(body, "Missing the required parameter 'body' when calling adjustInvoiceItem");

        final String uri = "/1.0/kb/invoices/{invoiceId}"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (requestedDate != null) {
            addToMapValues(queryParams, "requestedDate", List.of(String.valueOf(requestedDate)));
        }
        if (pluginProperty != null) {
            addToMapValues(queryParams, "pluginProperty", Converter.convertPluginPropertyMap(pluginProperty));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, Invoice.class, requestOptions);
    }

    public void commitInvoice(final UUID invoiceId, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling commitInvoice");

        final String uri = "/1.0/kb/invoices/{invoiceId}/commitInvoice"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPut(uri, null, requestOptions);
    }

    public InvoiceItems createExternalCharges(final UUID accountId, final InvoiceItems body, final LocalDate requestedDate, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        return createExternalCharges(accountId, body, requestedDate, Boolean.valueOf(false), pluginProperty, inputOptions);
    }

    public InvoiceItems createExternalCharges(final UUID accountId, final InvoiceItems body, final LocalDate requestedDate, final Boolean autoCommit, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(accountId, "Missing the required parameter 'accountId' when calling createExternalCharges");
        checkNotNull(body, "Missing the required parameter 'body' when calling createExternalCharges");

        final String uri = "/1.0/kb/invoices/charges/{accountId}"
          .replaceAll("\\{" + "accountId" + "\\}", accountId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (requestedDate != null) {
            addToMapValues(queryParams, "requestedDate", List.of(String.valueOf(requestedDate)));
        }
        if (autoCommit != null) {
            addToMapValues(queryParams, "autoCommit", List.of(String.valueOf(autoCommit)));
        }
        if (pluginProperty != null) {
            addToMapValues(queryParams, "pluginProperty", Converter.convertPluginPropertyMap(pluginProperty));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, InvoiceItems.class, requestOptions);
    }

    public Invoice createFutureInvoice(final UUID accountId, final LocalDate targetDate, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(accountId, "Missing the required parameter 'accountId' when calling createFutureInvoice");

        final String uri = "/1.0/kb/invoices";

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (accountId != null) {
            addToMapValues(queryParams, "accountId", List.of(String.valueOf(accountId)));
        }
        if (targetDate != null) {
            addToMapValues(queryParams, "targetDate", List.of(String.valueOf(targetDate)));
        }
        if (pluginProperty != null) {
            addToMapValues(queryParams, "pluginProperty", Converter.convertPluginPropertyMap(pluginProperty));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, null, Invoice.class, requestOptions);
    }

    public Invoices createFutureInvoiceGroup(final UUID accountId, final LocalDate targetDate, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(accountId, "Missing the required parameter 'accountId' when calling createFutureInvoiceGroup");

        final String uri = "/1.0/kb/invoices/group";

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (accountId != null) {
            addToMapValues(queryParams, "accountId", List.of(String.valueOf(accountId)));
        }
        if (targetDate != null) {
            addToMapValues(queryParams, "targetDate", List.of(String.valueOf(targetDate)));
        }
        if (pluginProperty != null) {
            addToMapValues(queryParams, "pluginProperty", Converter.convertPluginPropertyMap(pluginProperty));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, null, Invoices.class, requestOptions);
    }

    public InvoicePayment createInstantPayment(final UUID invoiceId, final InvoicePayment body, final List<String> controlPluginName, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        return createInstantPayment(invoiceId, body, Boolean.valueOf(false), controlPluginName, pluginProperty, inputOptions);
    }

    public InvoicePayment createInstantPayment(final UUID invoiceId, final InvoicePayment body, final Boolean externalPayment, final List<String> controlPluginName, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling createInstantPayment");
        checkNotNull(body, "Missing the required parameter 'body' when calling createInstantPayment");

        final String uri = "/1.0/kb/invoices/{invoiceId}/payments"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (externalPayment != null) {
            addToMapValues(queryParams, "externalPayment", List.of(String.valueOf(externalPayment)));
        }
        if (controlPluginName != null) {
            addToMapValues(queryParams, "controlPluginName", controlPluginName);
        }
        if (pluginProperty != null) {
            addToMapValues(queryParams, "pluginProperty", Converter.convertPluginPropertyMap(pluginProperty));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, InvoicePayment.class, requestOptions);
    }

    public CustomFields createInvoiceCustomFields(final UUID invoiceId, final CustomFields body, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling createInvoiceCustomFields");
        checkNotNull(body, "Missing the required parameter 'body' when calling createInvoiceCustomFields");

        final String uri = "/1.0/kb/invoices/{invoiceId}/customFields"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, CustomFields.class, requestOptions);
    }

    public Tags createInvoiceTags(final UUID invoiceId, final List<UUID> body, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling createInvoiceTags");
        checkNotNull(body, "Missing the required parameter 'body' when calling createInvoiceTags");

        final String uri = "/1.0/kb/invoices/{invoiceId}/tags"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, Tags.class, requestOptions);
    }

    public Invoice createMigrationInvoice(final UUID accountId, final InvoiceItems body, final LocalDate targetDate, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(accountId, "Missing the required parameter 'accountId' when calling createMigrationInvoice");
        checkNotNull(body, "Missing the required parameter 'body' when calling createMigrationInvoice");

        final String uri = "/1.0/kb/invoices/migration/{accountId}"
          .replaceAll("\\{" + "accountId" + "\\}", accountId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (targetDate != null) {
            addToMapValues(queryParams, "targetDate", List.of(String.valueOf(targetDate)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, Invoice.class, requestOptions);
    }

    public InvoiceItems createTaxItems(final UUID accountId, final InvoiceItems body, final LocalDate requestedDate, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        return createTaxItems(accountId, body, Boolean.valueOf(false), requestedDate, pluginProperty, inputOptions);
    }

    public InvoiceItems createTaxItems(final UUID accountId, final InvoiceItems body, final Boolean autoCommit, final LocalDate requestedDate, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(accountId, "Missing the required parameter 'accountId' when calling createTaxItems");
        checkNotNull(body, "Missing the required parameter 'body' when calling createTaxItems");

        final String uri = "/1.0/kb/invoices/taxes/{accountId}"
          .replaceAll("\\{" + "accountId" + "\\}", accountId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (autoCommit != null) {
            addToMapValues(queryParams, "autoCommit", List.of(String.valueOf(autoCommit)));
        }
        if (requestedDate != null) {
            addToMapValues(queryParams, "requestedDate", List.of(String.valueOf(requestedDate)));
        }
        if (pluginProperty != null) {
            addToMapValues(queryParams, "pluginProperty", Converter.convertPluginPropertyMap(pluginProperty));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, InvoiceItems.class, requestOptions);
    }


    public void deleteCBA(final UUID invoiceId, final UUID invoiceItemId, final UUID accountId, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling deleteCBA");
        checkNotNull(invoiceItemId, "Missing the required parameter 'invoiceItemId' when calling deleteCBA");
        checkNotNull(accountId, "Missing the required parameter 'accountId' when calling deleteCBA");

        final String uri = "/1.0/kb/invoices/{invoiceId}/{invoiceItemId}/cba"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString())
          .replaceAll("\\{" + "invoiceItemId" + "\\}", invoiceItemId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (accountId != null) {
            addToMapValues(queryParams, "accountId", List.of(String.valueOf(accountId)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doDelete(uri, requestOptions);
    }


    public void deleteInvoiceCustomFields(final UUID invoiceId, final List<UUID> customField, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling deleteInvoiceCustomFields");

        final String uri = "/1.0/kb/invoices/{invoiceId}/customFields"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (customField != null) {
            addToMapValues(queryParams, "customField", Converter.convertUUIDListToStringList(customField));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doDelete(uri, requestOptions);
    }


    public void deleteInvoiceTags(final UUID invoiceId, final List<UUID> tagDef, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling deleteInvoiceTags");

        final String uri = "/1.0/kb/invoices/{invoiceId}/tags"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (tagDef != null) {
            addToMapValues(queryParams, "tagDef", Converter.convertUUIDListToStringList(tagDef));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doDelete(uri, requestOptions);
    }

    public Invoice generateDryRunInvoice(final InvoiceDryRun body, final UUID accountId, final LocalDate targetDate, final Map<String, String> pluginProperty, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(body, "Missing the required parameter 'body' when calling generateDryRunInvoice");
        checkNotNull(accountId, "Missing the required parameter 'accountId' when calling generateDryRunInvoice");

        final String uri = "/1.0/kb/invoices/dryRun";

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (accountId != null) {
            addToMapValues(queryParams, "accountId", List.of(String.valueOf(accountId)));
        }
        if (targetDate != null) {
            addToMapValues(queryParams, "targetDate", List.of(String.valueOf(targetDate)));
        }
        if (pluginProperty != null) {
            addToMapValues(queryParams, "pluginProperty", Converter.convertPluginPropertyMap(pluginProperty));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, Invoice.class, requestOptions);
    }

    public String getCatalogTranslation(final String locale, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(locale, "Missing the required parameter 'locale' when calling getCatalogTranslation");

        final String uri = "/1.0/kb/invoices/catalogTranslation/{locale}"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/plain");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public Invoice getInvoice(final UUID invoiceId, final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoice(invoiceId, Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Invoice getInvoice(final UUID invoiceId, final Boolean withChildrenItems, final AuditLevel audit, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getInvoice");

        final String uri = "/1.0/kb/invoices/{invoiceId}"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (withChildrenItems != null) {
            addToMapValues(queryParams, "withChildrenItems", List.of(String.valueOf(withChildrenItems)));
        }
        if (audit != null) {
            addToMapValues(queryParams, "audit", List.of(String.valueOf(audit)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoice.class, requestOptions);
    }

    public String getInvoiceAsHTML(final UUID invoiceId, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getInvoiceAsHTML");

        final String uri = "/1.0/kb/invoices/{invoiceId}/html"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public AuditLogs getInvoiceAuditLogsWithHistory(final UUID invoiceId, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getInvoiceAuditLogsWithHistory");

        final String uri = "/1.0/kb/invoices/{invoiceId}/auditLogsWithHistory"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, AuditLogs.class, requestOptions);
    }

    public Invoice getInvoiceByItemId(final UUID itemId, final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoiceByItemId(itemId, Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Invoice getInvoiceByItemId(final UUID itemId, final Boolean withChildrenItems, final AuditLevel audit, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(itemId, "Missing the required parameter 'itemId' when calling getInvoiceByItemId");

        final String uri = "/1.0/kb/invoices/byItemId/{itemId}"
          .replaceAll("\\{" + "itemId" + "\\}", itemId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (withChildrenItems != null) {
            addToMapValues(queryParams, "withChildrenItems", List.of(String.valueOf(withChildrenItems)));
        }
        if (audit != null) {
            addToMapValues(queryParams, "audit", List.of(String.valueOf(audit)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoice.class, requestOptions);
    }

    public Invoice getInvoiceByNumber(final Integer invoiceNumber, final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoiceByNumber(invoiceNumber, Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Invoice getInvoiceByNumber(final Integer invoiceNumber, final Boolean withChildrenItems, final AuditLevel audit, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceNumber, "Missing the required parameter 'invoiceNumber' when calling getInvoiceByNumber");

        final String uri = "/1.0/kb/invoices/byNumber/{invoiceNumber}"
          .replaceAll("\\{" + "invoiceNumber" + "\\}", invoiceNumber.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (withChildrenItems != null) {
            addToMapValues(queryParams, "withChildrenItems", List.of(String.valueOf(withChildrenItems)));
        }
        if (audit != null) {
            addToMapValues(queryParams, "audit", List.of(String.valueOf(audit)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoice.class, requestOptions);
    }

    public CustomFields getInvoiceCustomFields(final UUID invoiceId, final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoiceCustomFields(invoiceId, AuditLevel.NONE, inputOptions);
    }

    public CustomFields getInvoiceCustomFields(final UUID invoiceId, final AuditLevel audit, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getInvoiceCustomFields");

        final String uri = "/1.0/kb/invoices/{invoiceId}/customFields"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (audit != null) {
            addToMapValues(queryParams, "audit", List.of(String.valueOf(audit)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, CustomFields.class, requestOptions);
    }

    public String getInvoiceMPTemplate(final String locale, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(locale, "Missing the required parameter 'locale' when calling getInvoiceMPTemplate");

        final String uri = "/1.0/kb/invoices/manualPayTemplate/{locale}"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public Tags getInvoiceTags(final UUID invoiceId, final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoiceTags(invoiceId, Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Tags getInvoiceTags(final UUID invoiceId, final Boolean includedDeleted, final AuditLevel audit, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getInvoiceTags");

        final String uri = "/1.0/kb/invoices/{invoiceId}/tags"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (includedDeleted != null) {
            addToMapValues(queryParams, "includedDeleted", List.of(String.valueOf(includedDeleted)));
        }
        if (audit != null) {
            addToMapValues(queryParams, "audit", List.of(String.valueOf(audit)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Tags.class, requestOptions);
    }

    public String getInvoiceTemplate(final RequestOptions inputOptions) throws KillBillClientException {

        final String uri = "/1.0/kb/invoices/template";


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public String getInvoiceTranslation(final String locale, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(locale, "Missing the required parameter 'locale' when calling getInvoiceTranslation");

        final String uri = "/1.0/kb/invoices/translation/{locale}"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/plain");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public Invoices getInvoices(final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoices(Long.valueOf(0), Long.valueOf(100), AuditLevel.NONE, inputOptions);
    }

    public Invoices getInvoices(final Long offset, final Long limit, final AuditLevel audit, final RequestOptions inputOptions) throws KillBillClientException {

        final String uri = "/1.0/kb/invoices/pagination";

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (offset != null) {
            addToMapValues(queryParams, "offset", List.of(String.valueOf(offset)));
        }
        if (limit != null) {
            addToMapValues(queryParams, "limit", List.of(String.valueOf(limit)));
        }
        if (audit != null) {
            addToMapValues(queryParams, "audit", List.of(String.valueOf(audit)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoices.class, requestOptions);
    }

    public Invoices getInvoicesGroup(final UUID groupId, final UUID accountId, final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoicesGroup(groupId, accountId, Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Invoices getInvoicesGroup(final UUID groupId, final UUID accountId, final Boolean withChildrenItems, final AuditLevel audit, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(groupId, "Missing the required parameter 'groupId' when calling getInvoicesGroup");
        checkNotNull(accountId, "Missing the required parameter 'accountId' when calling getInvoicesGroup");

        final String uri = "/1.0/kb/invoices/{groupId}/group"
          .replaceAll("\\{" + "groupId" + "\\}", groupId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (accountId != null) {
            addToMapValues(queryParams, "accountId", List.of(String.valueOf(accountId)));
        }
        if (withChildrenItems != null) {
            addToMapValues(queryParams, "withChildrenItems", List.of(String.valueOf(withChildrenItems)));
        }
        if (audit != null) {
            addToMapValues(queryParams, "audit", List.of(String.valueOf(audit)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoices.class, requestOptions);
    }

    public InvoicePayments getPaymentsForInvoice(final UUID invoiceId, final RequestOptions inputOptions) throws KillBillClientException {
        return getPaymentsForInvoice(invoiceId, Boolean.valueOf(false), Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public InvoicePayments getPaymentsForInvoice(final UUID invoiceId, final Boolean withPluginInfo, final Boolean withAttempts, final AuditLevel audit, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getPaymentsForInvoice");

        final String uri = "/1.0/kb/invoices/{invoiceId}/payments"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (withPluginInfo != null) {
            addToMapValues(queryParams, "withPluginInfo", List.of(String.valueOf(withPluginInfo)));
        }
        if (withAttempts != null) {
            addToMapValues(queryParams, "withAttempts", List.of(String.valueOf(withAttempts)));
        }
        if (audit != null) {
            addToMapValues(queryParams, "audit", List.of(String.valueOf(audit)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, InvoicePayments.class, requestOptions);
    }

    public void modifyInvoiceCustomFields(final UUID invoiceId, final CustomFields body, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling modifyInvoiceCustomFields");
        checkNotNull(body, "Missing the required parameter 'body' when calling modifyInvoiceCustomFields");

        final String uri = "/1.0/kb/invoices/{invoiceId}/customFields"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPut(uri, body, requestOptions);
    }

    public Invoices searchInvoices(final String searchKey, final RequestOptions inputOptions) throws KillBillClientException {
        return searchInvoices(searchKey, Long.valueOf(0), Long.valueOf(100), AuditLevel.NONE, inputOptions);
    }

    public Invoices searchInvoices(final String searchKey, final Long offset, final Long limit, final AuditLevel audit, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(searchKey, "Missing the required parameter 'searchKey' when calling searchInvoices");

        final String uri = "/1.0/kb/invoices/search/{searchKey}"
          .replaceAll("\\{" + "searchKey" + "\\}", searchKey.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (offset != null) {
            addToMapValues(queryParams, "offset", List.of(String.valueOf(offset)));
        }
        if (limit != null) {
            addToMapValues(queryParams, "limit", List.of(String.valueOf(limit)));
        }
        if (audit != null) {
            addToMapValues(queryParams, "audit", List.of(String.valueOf(audit)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoices.class, requestOptions);
    }

    public String uploadCatalogTranslation(final String locale, final String body, final RequestOptions inputOptions) throws KillBillClientException {
        return uploadCatalogTranslation(locale, body, Boolean.valueOf(false), inputOptions);
    }

    public String uploadCatalogTranslation(final String locale, final String body, final Boolean deleteIfExists, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(locale, "Missing the required parameter 'locale' when calling uploadCatalogTranslation");
        checkNotNull(body, "Missing the required parameter 'body' when calling uploadCatalogTranslation");

        final String uri = "/1.0/kb/invoices/catalogTranslation/{locale}"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (deleteIfExists != null) {
            addToMapValues(queryParams, "deleteIfExists", List.of(String.valueOf(deleteIfExists)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/plain");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/plain");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, String.class, requestOptions);
    }

    public String uploadInvoiceMPTemplate(final String body, final RequestOptions inputOptions) throws KillBillClientException {
        return uploadInvoiceMPTemplate(body, Boolean.valueOf(false), inputOptions);
    }

    public String uploadInvoiceMPTemplate(final String body, final Boolean deleteIfExists, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(body, "Missing the required parameter 'body' when calling uploadInvoiceMPTemplate");

        final String uri = "/1.0/kb/invoices/manualPayTemplate";

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (deleteIfExists != null) {
            addToMapValues(queryParams, "deleteIfExists", List.of(String.valueOf(deleteIfExists)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/html");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, String.class, requestOptions);
    }

    public String uploadInvoiceTemplate(final String body, final RequestOptions inputOptions) throws KillBillClientException {
        return uploadInvoiceTemplate(body, Boolean.valueOf(false), inputOptions);
    }

    public String uploadInvoiceTemplate(final String body, final Boolean deleteIfExists, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(body, "Missing the required parameter 'body' when calling uploadInvoiceTemplate");

        final String uri = "/1.0/kb/invoices/template";

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (deleteIfExists != null) {
            addToMapValues(queryParams, "deleteIfExists", List.of(String.valueOf(deleteIfExists)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/html");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, String.class, requestOptions);
    }

    public String uploadInvoiceTranslation(final String locale, final String body, final RequestOptions inputOptions) throws KillBillClientException {
        return uploadInvoiceTranslation(locale, body, Boolean.valueOf(false), inputOptions);
    }

    public String uploadInvoiceTranslation(final String locale, final String body, final Boolean deleteIfExists, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(locale, "Missing the required parameter 'locale' when calling uploadInvoiceTranslation");
        checkNotNull(body, "Missing the required parameter 'body' when calling uploadInvoiceTranslation");

        final String uri = "/1.0/kb/invoices/translation/{locale}"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());

        final Map<String, Collection<String>> queryParams = new HashMap<>(inputOptions.getQueryParams());
        if (deleteIfExists != null) {
            addToMapValues(queryParams, "deleteIfExists", List.of(String.valueOf(deleteIfExists)));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = Objects.requireNonNullElse(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/plain");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/plain");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, String.class, requestOptions);
    }

    public void voidInvoice(final UUID invoiceId, final RequestOptions inputOptions) throws KillBillClientException {
        checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling voidInvoice");

        final String uri = "/1.0/kb/invoices/{invoiceId}/voidInvoice"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPut(uri, null, requestOptions);
    }

}
