/*
 * Copyright 2010-2014 Ning, Inc.
 * Copyright 2014-2020 Groupon, Inc
 * Copyright 2020-2020 Equinix, Inc
 * Copyright 2014-2020 The Billing Project, LLC
 *
 * The Billing Project licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */


package org.killbill.billing.client.model.gen;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
import org.killbill.billing.catalog.api.Currency;
import org.killbill.billing.client.model.gen.PriceList;
import org.killbill.billing.client.model.gen.Product;
import org.killbill.billing.client.model.gen.Unit;

/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
import org.killbill.billing.client.model.KillBillObject;

public class Catalog {

    private String name = null;

    private DateTime effectiveDate = null;

    private List<Currency> currencies = null;

    private List<Unit> units = null;

    private List<Product> products = null;

    private List<PriceList> priceLists = null;


    public Catalog() {
    }

    public Catalog(final String name,
                     final DateTime effectiveDate,
                     final List<Currency> currencies,
                     final List<Unit> units,
                     final List<Product> products,
                     final List<PriceList> priceLists) {
        this.name = name;
        this.effectiveDate = effectiveDate;
        this.currencies = currencies;
        this.units = units;
        this.products = products;
        this.priceLists = priceLists;

    }


    public Catalog setName(final String name) {
        this.name = name;
        return this;
    }

    public String getName() {
        return name;
    }

    public Catalog setEffectiveDate(final DateTime effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }

    public DateTime getEffectiveDate() {
        return effectiveDate;
    }

    public Catalog setCurrencies(final List<Currency> currencies) {
        this.currencies = currencies;
        return this;
    }

    public Catalog addCurrenciesItem(final Currency currenciesItem) {
        if (this.currencies == null) {
            this.currencies = new ArrayList<Currency>();
        }
        this.currencies.add(currenciesItem);
        return this;
    }

    public List<Currency> getCurrencies() {
        return currencies;
    }

    public Catalog setUnits(final List<Unit> units) {
        this.units = units;
        return this;
    }

    public Catalog addUnitsItem(final Unit unitsItem) {
        if (this.units == null) {
            this.units = new ArrayList<Unit>();
        }
        this.units.add(unitsItem);
        return this;
    }

    public List<Unit> getUnits() {
        return units;
    }

    public Catalog setProducts(final List<Product> products) {
        this.products = products;
        return this;
    }

    public Catalog addProductsItem(final Product productsItem) {
        if (this.products == null) {
            this.products = new ArrayList<Product>();
        }
        this.products.add(productsItem);
        return this;
    }

    public List<Product> getProducts() {
        return products;
    }

    public Catalog setPriceLists(final List<PriceList> priceLists) {
        this.priceLists = priceLists;
        return this;
    }

    public Catalog addPriceListsItem(final PriceList priceListsItem) {
        if (this.priceLists == null) {
            this.priceLists = new ArrayList<PriceList>();
        }
        this.priceLists.add(priceListsItem);
        return this;
    }

    public List<PriceList> getPriceLists() {
        return priceLists;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Catalog catalog = (Catalog) o;
        return Objects.equals(this.name, catalog.name) &&
        Objects.equals(this.effectiveDate, catalog.effectiveDate) &&
        Objects.equals(this.currencies, catalog.currencies) &&
        Objects.equals(this.units, catalog.units) &&
        Objects.equals(this.products, catalog.products) &&
        Objects.equals(this.priceLists, catalog.priceLists);

    }

    @Override
    public int hashCode() {
        return Objects.hash(name,
                            effectiveDate,
                            currencies,
                            units,
                            products,
                            priceLists);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Catalog {\n");
        
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
        sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
        sb.append("    units: ").append(toIndentedString(units)).append("\n");
        sb.append("    products: ").append(toIndentedString(products)).append("\n");
        sb.append("    priceLists: ").append(toIndentedString(priceLists)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

