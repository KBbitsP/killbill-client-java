/*
 * Copyright 2010-2014 Ning, Inc.
 * Copyright 2014-2020 Groupon, Inc
 * Copyright 2020-2021 Equinix, Inc
 * Copyright 2014-2021 The Billing Project, LLC
 *
 * The Billing Project licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */


package org.killbill.billing.client.model.gen;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
import org.killbill.billing.client.model.gen.PluginInfo;

/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
import org.killbill.billing.client.model.KillBillObject;

public class NodeInfo {

    private String nodeName = null;

    private DateTime bootTime = null;

    private DateTime lastUpdatedDate = null;

    private String kbVersion = null;

    private String apiVersion = null;

    private String pluginApiVersion = null;

    private String commonVersion = null;

    private String platformVersion = null;

    private List<PluginInfo> pluginsInfo = null;


    public NodeInfo() {
    }

    public NodeInfo(final String nodeName,
                     final DateTime bootTime,
                     final DateTime lastUpdatedDate,
                     final String kbVersion,
                     final String apiVersion,
                     final String pluginApiVersion,
                     final String commonVersion,
                     final String platformVersion,
                     final List<PluginInfo> pluginsInfo) {
        this.nodeName = nodeName;
        this.bootTime = bootTime;
        this.lastUpdatedDate = lastUpdatedDate;
        this.kbVersion = kbVersion;
        this.apiVersion = apiVersion;
        this.pluginApiVersion = pluginApiVersion;
        this.commonVersion = commonVersion;
        this.platformVersion = platformVersion;
        this.pluginsInfo = pluginsInfo;

    }


    public NodeInfo setNodeName(final String nodeName) {
        this.nodeName = nodeName;
        return this;
    }

    public String getNodeName() {
        return nodeName;
    }

    public NodeInfo setBootTime(final DateTime bootTime) {
        this.bootTime = bootTime;
        return this;
    }

    public DateTime getBootTime() {
        return bootTime;
    }

    public NodeInfo setLastUpdatedDate(final DateTime lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
        return this;
    }

    public DateTime getLastUpdatedDate() {
        return lastUpdatedDate;
    }

    public NodeInfo setKbVersion(final String kbVersion) {
        this.kbVersion = kbVersion;
        return this;
    }

    public String getKbVersion() {
        return kbVersion;
    }

    public NodeInfo setApiVersion(final String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    public String getApiVersion() {
        return apiVersion;
    }

    public NodeInfo setPluginApiVersion(final String pluginApiVersion) {
        this.pluginApiVersion = pluginApiVersion;
        return this;
    }

    public String getPluginApiVersion() {
        return pluginApiVersion;
    }

    public NodeInfo setCommonVersion(final String commonVersion) {
        this.commonVersion = commonVersion;
        return this;
    }

    public String getCommonVersion() {
        return commonVersion;
    }

    public NodeInfo setPlatformVersion(final String platformVersion) {
        this.platformVersion = platformVersion;
        return this;
    }

    public String getPlatformVersion() {
        return platformVersion;
    }

    public NodeInfo setPluginsInfo(final List<PluginInfo> pluginsInfo) {
        this.pluginsInfo = pluginsInfo;
        return this;
    }

    public NodeInfo addPluginsInfoItem(final PluginInfo pluginsInfoItem) {
        if (this.pluginsInfo == null) {
            this.pluginsInfo = new ArrayList<PluginInfo>();
        }
        this.pluginsInfo.add(pluginsInfoItem);
        return this;
    }

    public List<PluginInfo> getPluginsInfo() {
        return pluginsInfo;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NodeInfo nodeInfo = (NodeInfo) o;
        return Objects.equals(this.nodeName, nodeInfo.nodeName) &&
            Objects.equals(this.bootTime, nodeInfo.bootTime) &&
            Objects.equals(this.lastUpdatedDate, nodeInfo.lastUpdatedDate) &&
            Objects.equals(this.kbVersion, nodeInfo.kbVersion) &&
            Objects.equals(this.apiVersion, nodeInfo.apiVersion) &&
            Objects.equals(this.pluginApiVersion, nodeInfo.pluginApiVersion) &&
            Objects.equals(this.commonVersion, nodeInfo.commonVersion) &&
            Objects.equals(this.platformVersion, nodeInfo.platformVersion) &&
            Objects.equals(this.pluginsInfo, nodeInfo.pluginsInfo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nodeName,
            bootTime,
            lastUpdatedDate,
            kbVersion,
            apiVersion,
            pluginApiVersion,
            commonVersion,
            platformVersion,
            pluginsInfo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NodeInfo {\n");
        
        sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
        sb.append("    bootTime: ").append(toIndentedString(bootTime)).append("\n");
        sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
        sb.append("    kbVersion: ").append(toIndentedString(kbVersion)).append("\n");
        sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
        sb.append("    pluginApiVersion: ").append(toIndentedString(pluginApiVersion)).append("\n");
        sb.append("    commonVersion: ").append(toIndentedString(commonVersion)).append("\n");
        sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
        sb.append("    pluginsInfo: ").append(toIndentedString(pluginsInfo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

