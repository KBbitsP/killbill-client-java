/*
 * Copyright 2010-2014 Ning, Inc.
 * Copyright 2014-2020 Groupon, Inc
 * Copyright 2020-2020 Equinix, Inc
 * Copyright 2014-2020 The Billing Project, LLC
 *
 * The Billing Project licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */


package org.killbill.billing.client.model.gen;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.joda.time.DateTime;
import org.killbill.billing.catalog.api.Currency;
import org.killbill.billing.client.model.gen.AuditLog;
import org.killbill.billing.client.model.gen.PluginProperty;
import org.killbill.billing.payment.api.TransactionType;

/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
import org.killbill.billing.client.model.KillBillObject;

public class PaymentAttempt extends KillBillObject {

    private UUID accountId = null;

    private UUID paymentMethodId = null;

    private String paymentExternalKey = null;

    private UUID transactionId = null;

    private String transactionExternalKey = null;

    private TransactionType transactionType = null;

    private DateTime effectiveDate = null;

    private String stateName = null;

    private BigDecimal amount = null;

    private Currency currency = null;

    private String pluginName = null;

    private List<PluginProperty> pluginProperties = null;



    public PaymentAttempt() {
    }

    public PaymentAttempt(final UUID accountId,
                     final UUID paymentMethodId,
                     final String paymentExternalKey,
                     final UUID transactionId,
                     final String transactionExternalKey,
                     final TransactionType transactionType,
                     final DateTime effectiveDate,
                     final String stateName,
                     final BigDecimal amount,
                     final Currency currency,
                     final String pluginName,
                     final List<PluginProperty> pluginProperties,
                     final List<AuditLog> auditLogs) {
        super(auditLogs);
        this.accountId = accountId;
        this.paymentMethodId = paymentMethodId;
        this.paymentExternalKey = paymentExternalKey;
        this.transactionId = transactionId;
        this.transactionExternalKey = transactionExternalKey;
        this.transactionType = transactionType;
        this.effectiveDate = effectiveDate;
        this.stateName = stateName;
        this.amount = amount;
        this.currency = currency;
        this.pluginName = pluginName;
        this.pluginProperties = pluginProperties;

    }


    public PaymentAttempt setAccountId(final UUID accountId) {
        this.accountId = accountId;
        return this;
    }

    public UUID getAccountId() {
        return accountId;
    }

    public PaymentAttempt setPaymentMethodId(final UUID paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    public UUID getPaymentMethodId() {
        return paymentMethodId;
    }

    public PaymentAttempt setPaymentExternalKey(final String paymentExternalKey) {
        this.paymentExternalKey = paymentExternalKey;
        return this;
    }

    public String getPaymentExternalKey() {
        return paymentExternalKey;
    }

    public PaymentAttempt setTransactionId(final UUID transactionId) {
        this.transactionId = transactionId;
        return this;
    }

    public UUID getTransactionId() {
        return transactionId;
    }

    public PaymentAttempt setTransactionExternalKey(final String transactionExternalKey) {
        this.transactionExternalKey = transactionExternalKey;
        return this;
    }

    public String getTransactionExternalKey() {
        return transactionExternalKey;
    }

    public PaymentAttempt setTransactionType(final TransactionType transactionType) {
        this.transactionType = transactionType;
        return this;
    }

    public TransactionType getTransactionType() {
        return transactionType;
    }

    public PaymentAttempt setEffectiveDate(final DateTime effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }

    public DateTime getEffectiveDate() {
        return effectiveDate;
    }

    public PaymentAttempt setStateName(final String stateName) {
        this.stateName = stateName;
        return this;
    }

    public String getStateName() {
        return stateName;
    }

    public PaymentAttempt setAmount(final BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public PaymentAttempt setCurrency(final Currency currency) {
        this.currency = currency;
        return this;
    }

    public Currency getCurrency() {
        return currency;
    }

    public PaymentAttempt setPluginName(final String pluginName) {
        this.pluginName = pluginName;
        return this;
    }

    public String getPluginName() {
        return pluginName;
    }

    public PaymentAttempt setPluginProperties(final List<PluginProperty> pluginProperties) {
        this.pluginProperties = pluginProperties;
        return this;
    }

    public PaymentAttempt addPluginPropertiesItem(final PluginProperty pluginPropertiesItem) {
        if (this.pluginProperties == null) {
            this.pluginProperties = new ArrayList<PluginProperty>();
        }
        this.pluginProperties.add(pluginPropertiesItem);
        return this;
    }

    public List<PluginProperty> getPluginProperties() {
        return pluginProperties;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentAttempt paymentAttempt = (PaymentAttempt) o;
        return Objects.equals(this.accountId, paymentAttempt.accountId) &&
        Objects.equals(this.paymentMethodId, paymentAttempt.paymentMethodId) &&
        Objects.equals(this.paymentExternalKey, paymentAttempt.paymentExternalKey) &&
        Objects.equals(this.transactionId, paymentAttempt.transactionId) &&
        Objects.equals(this.transactionExternalKey, paymentAttempt.transactionExternalKey) &&
        Objects.equals(this.transactionType, paymentAttempt.transactionType) &&
        Objects.equals(this.effectiveDate, paymentAttempt.effectiveDate) &&
        Objects.equals(this.stateName, paymentAttempt.stateName) &&
        Objects.equals(this.amount, paymentAttempt.amount) &&
        Objects.equals(this.currency, paymentAttempt.currency) &&
        Objects.equals(this.pluginName, paymentAttempt.pluginName) &&
        Objects.equals(this.pluginProperties, paymentAttempt.pluginProperties) &&
        Objects.equals(this.auditLogs, paymentAttempt.auditLogs);

    }

    @Override
    public int hashCode() {
        return Objects.hash(accountId,
                            paymentMethodId,
                            paymentExternalKey,
                            transactionId,
                            transactionExternalKey,
                            transactionType,
                            effectiveDate,
                            stateName,
                            amount,
                            currency,
                            pluginName,
                            pluginProperties,
                            auditLogs, super.hashCode());
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PaymentAttempt {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
        sb.append("    paymentExternalKey: ").append(toIndentedString(paymentExternalKey)).append("\n");
        sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
        sb.append("    transactionExternalKey: ").append(toIndentedString(transactionExternalKey)).append("\n");
        sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
        sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
        sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    pluginName: ").append(toIndentedString(pluginName)).append("\n");
        sb.append("    pluginProperties: ").append(toIndentedString(pluginProperties)).append("\n");
        sb.append("    auditLogs: ").append(toIndentedString(auditLogs)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

